import React, { Component } from 'react';
import {
    View,
    Text,
    ScrollView,
    CheckBox,
    TimePickerAndroid
} from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import moment from "moment";

import styles from './styles'
import CustomCard from '../../../components/CustomCards';
import MessageBox from '../../../components/MessageBox';
import SavePrompt from '../../../components/SavePrompt';
import apiConfig, {endPoints} from '../../../services/api/config';

/* //Redux
import { connect } from 'react-redux';
import {
    SetLoginInfo, 
    SetActiveCompany,
} from '../../../actions'; */

const title_WorkShift = 'Set the Companyâ€™s Default Work Shift';
const category = ['', 'DAY OFF', 'TIME-IN', 'TIME-OUT'];
const description_DefaultTime = 'The same Time-in and Time-out';
let testNum = 0;

export default class WorkShift extends Component {
    constructor(props){
        super(props);
        this.state = {
            _isLoaded: false,
            _dailyPolicy: {
                sunday: {
                    header: 'S',
                    dayoff: true,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                monday: {
                    header: 'M',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                tuesday: {
                    header: 'T',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                wednesday: {
                    header: 'W',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                thursday: {
                    header: 'T',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                friday: {
                    header: 'F',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                saturday: {
                    header: 'S',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
            },

            _defaultSetting:{
                enabled: false,
                timein: '00:00 PM',
                timeout: '00:00 PM'
            },

            _ORIGdailyPolicy: {
                sunday: {
                    header: 'S',
                    dayoff: true,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                monday: {
                    header: 'M',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                tuesday: {
                    header: 'T',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                wednesday: {
                    header: 'W',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                thursday: {
                    header: 'T',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                friday: {
                    header: 'F',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
                saturday: {
                    header: 'S',
                    dayoff: false,
                    timein: '08:00 AM',
                    timeout: '05:30 PM',
                },
            },

            _ORIGdefaultSetting:{
                enabled: false,
                timein: '00:00 PM',
                timeout: '00:00 PM'
            },


            _msgBoxShow: false,
            _msgBoxType: '',
            _resMsg: '',
            _changeDetected: false

/*             _dailyPolicy: {
                sunday: {
                    header: 'S',
                    dayoff: true,
                    timein: '8:00 AM',
                    timeout: '5:30 PM',
                },
                monday: {
                    header: 'M',
                    dayoff: false,
                    timein: '',
                    timeout: '',
                },
                tuesday: {
                    header: 'T',
                    dayoff: false,
                    timein: '',
                    timeout: '',
                },
                wednesday: {
                    header: 'W',
                    dayoff: false,
                    timein: '',
                    timeout: '',
                },
                thursday: {
                    header: 'T',
                    dayoff: false,
                    timein: '',
                    timeout: '',
                },
                friday: {
                    header: 'F',
                    dayoff: false,
                    timein: '',
                    timeout: '',
                },
                saturday: {
                    header: 'S',
                    dayoff: false,
                    timein: '',
                    timeout: '',
                },
            } */
        }
        this._continueActionOnWarning = this._continueActionOnWarning.bind(this);
        this._closeMsgBox = this._closeMsgBox.bind(this);
    }

    componentDidMount = () => {
        
        testNum++;
        console.log('testNum' + testNum)
/*         this.setState({
            _isLoaded: true
        }) */
    }

    _setBottomBorder = (index) => {
        if(index==0){
            return({
                borderBottomWidth: 0.7,
                borderColor: '#D1D4D6'
            })
        }
    }

    _setDayOff = (strkey, value) => {
        let objPolicy = {...this.state._dailyPolicy};
        Object.keys(objPolicy).map(function (key) {
            if(key==strkey){
                objPolicy[key].dayoff = value;
            }
        })
        this.setState({
            _dailyPolicy: objPolicy
        })
    }

    _activateDefaultTime = (value) => {
        if(value){
            this._triggerDefaultTime(true)
            this.setState({
                _resMsg: 'Daily Time Settings will be overriden. Are you sure you want to proceed?',
                _msgBoxShow: true,
                _msgBoxType: 'WARNING',
            },
                () => {this._triggerDefaultTime(false)}
            )
        }
        else{
            this._triggerDefaultTime(false);
        }
    }

    _triggerDefaultTime = (value) => {
        let objDefaultSetting = {...this.state._defaultSetting};
        Object.keys(objDefaultSetting).map(function (key) {
            if(key=='enabled'){
                objDefaultSetting[key] = value;
            }
        })
        this.setState({
            _defaultSetting: objDefaultSetting
        })
    }
    

    _showTimePicker = async(strKey, strType) => {
        let defaultTime = '';
        if(strType == 'timeout'){
            defaultTime = 17
        }
        else{
            defaultTime = 8
        }
        try {
            const {action, hour, minute} =await TimePickerAndroid.open({
                hour: defaultTime,
                minute: 0,
                is24Hour: false, // Will display '2 PM',
                mode: 'spinner'
            });

            if (action !== TimePickerAndroid.dismissedAction) {
               this._setTime(strKey, strType, hour, minute);
            }
            
            } catch ({code, message}) {
                console.warn('Cannot open time picker', message);
            }
    }

    _setTime = (strKey, strType, hour, minute) => {
        let strTime = moment(hour +':' + minute, 'hh:mm').format('hh:mm A');

        if(strKey=='default'){
            let objDefaultSetting = {...this.state._defaultSetting};
            Object.keys(objDefaultSetting).map(function (key) {
                if(key==strType){
                    
                    objDefaultSetting[key] = strTime;
                }
            })
            this.setState({
                _defaultSetting: objDefaultSetting
            },
                () => {
                    this._setAllTime(strType, strTime);
                }
            )
        }
        else{
            let objPolicy = {...this.state._dailyPolicy};
            Object.keys(objPolicy).map(function (key) {
                if(key==strKey){
                    if(strType=='timein'){
                        objPolicy[key].timein = strTime;
                    }
                    else if(strType=='timeout'){
                        objPolicy[key].timeout = strTime;
                    }
                }
            })
            this.setState({
                _dailyPolicy: objPolicy
            })
        }
    }

    _setAllTime = (strType, strTime) => {
        let objPolicy = {...this.state._dailyPolicy};
        Object.keys(objPolicy).map(function (key) {
            if(strType=='timein'){
                objPolicy[key].timein = strTime;
            }
            else if(strType=='timeout'){
                objPolicy[key].timeout = strTime;
            }
        })
        this.setState({
            _dailyPolicy: objPolicy
        })
    }

    _overrideAllTime = () => {
        this._triggerDefaultTime(true);
        this._setAllTime('timein', this.state._defaultSetting.timein);
        this._setAllTime('timeout', this.state._defaultSetting.timeout);
    }

    _continueActionOnWarning = () => {
        this._closeMsgBox();
        this._overrideAllTime();
    }

    _closeMsgBox = () => {
        this.setState({
            _msgBoxShow: false,
            _resMsg: ''
        });
    }

    _detectChanges = () => {
    }

/*     _fetchFromDB = () => {
        let objLoginInfo = Object.assign({}, this.props.logininfo)
        let objActiveCompany = Object.assign({}, this.props.activecompany)
        console.log('SCRIPT: ' + apiConfig.url + endPoints.workShift)
        console.log('INPUT: ' + JSON.stringify({
            companyid: objActiveCompany.id,
            username: objLoginInfo.resUsername,
            transtype: 'get'}))

        fetch(apiConfig.url + endPoints.workShift,{
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },

            body: JSON.stringify({
                companyid: objActiveCompany.id,
                username: objLoginInfo.resUsername,
                transtype: 'get'
            })
            
        }).then((response)=> response.json())
            .then((res)=>{
                console.log('OUTPUT: ' + res)
        }).catch((error)=> {
                alert(error);
        });
    }
 */
    render(){
        const oDailyPolicy = this.state._dailyPolicy;
        let iBorderCounter = -1;

/*         if(!this.state._isLoaded){
            return null;
        }
        else{ */
            return(
                <View style={styles.container}>
                    <ScrollView>
                        <CustomCard title={title_WorkShift}>
                            <View style={styles.tableCont}>
                                <View style={styles.categoryCont}>
                                    {
                                        category.map((info, index) => (
                                            <View key={index} style={[styles.categoryPlaceholder, this._setBottomBorder(index)]}>
                                                <Text style={styles.txtVerticalHeader}>{info}</Text>
                                            </View>
                                        ))
                                    }
                                </View>
                                
                                <View style={styles.detailsCont}>
                                    <ScrollView horizontal={true}>
                                        {
                                            Object.keys(oDailyPolicy).map(key => (
                                                <View key={key} style={styles.dailyCont}>
                                                    <View style={[styles.dailyPlaceholder, this._setBottomBorder(0)]}>
                                                        <Text style={styles.txtHorizontalHeader}>{oDailyPolicy[key].header}</Text>
                                                    </View>
                                                    <View style={styles.dailyPlaceholder}>
                                                        <CheckBox
                                                            onValueChange={ (value) => {this._setDayOff(key, value)}} 
                                                            value={oDailyPolicy[key].dayoff}
                                                        />
                                                    </View>
                                                    <View style={styles.dailyPlaceholder}>
                                                        <Text 
                                                            disabled={oDailyPolicy[key].dayoff} 
                                                            onPress={() => {
                                                                !this.state._defaultSetting.enabled ? 
                                                                    this._showTimePicker(key, 'timein') : 
                                                                    null
                                                            }} 
                                                            style={styles.txtContent}>
                                                            
                                                            {oDailyPolicy[key].timein}
                                                        </Text>
                                                        
                                                    </View>
                                                    <View style={styles.dailyPlaceholder}>

                                                    <Text 
                                                        disabled={oDailyPolicy[key].dayoff} 
                                                        onPress={() => {
                                                            !this.state._defaultSetting.enabled ? 
                                                                this._showTimePicker(key, 'timeout') :
                                                                null
                                                        }}
                                                        style={styles.txtContent}>
                                                        
                                                        {oDailyPolicy[key].timeout}

                                                    </Text>

                                                    </View>
                                                </View>
                                            ))
                                        }
                                    </ScrollView>
                                    
                                </View>
                            </View>
                            <View style={styles.defaultTimeCont}>
                                <View style={styles.defaultTimeCheckbox}>
                                    <CheckBox
                                        onValueChange={ (value) => {this._activateDefaultTime(value)}} 
                                        value={this.state._defaultSetting.enabled}
                                    />
                                    <Text style={styles.txtDefaultTimeMsg}>{description_DefaultTime}</Text>
                                </View>
                                { !this.state._defaultSetting.enabled ? null :
                                    <View style={styles.defaultTimePlaceholder}>
                                        <View style={styles.defaultTimeRow}>
                                            <View style={styles.defaultTimeLeft}>
                                                <Text style={styles.txtDefaultTimeMsg}>TIME-IN</Text>
                                            </View>
                                            <View style={styles.defaultTimeRight}>
                                                <Text onPress={() => this._showTimePicker('default', 'timein')} style={styles.txtDefaultTime}>{this.state._defaultSetting.timein}</Text>
                                            </View>
                                        </View>
                                        <View style={styles.defaultTimeRow}>
                                            <View style={styles.defaultTimeLeft}>
                                                <Text style={styles.txtDefaultTimeMsg}>TIME-OUT</Text>
                                            </View>
                                            <View style={styles.defaultTimeRight}>
                                                <Text onPress={() => this._showTimePicker('default', 'timeout')} style={styles.txtDefaultTime}>{this.state._defaultSetting.timeout}</Text>
                                            </View>
                                        </View>
                                            
                                    </View>
                                }
                            </View>
                        </CustomCard>
                    </ScrollView>
                    <SavePrompt/>
                    <MessageBox
                        promptType={this.state._msgBoxType}
                        show={this.state._msgBoxShow}
                        onClose={this._closeMsgBox}
                        onWarningContinue={this._continueActionOnWarning}
                        message={this.state._resMsg}
                    />
                </View>
            );
/*         } */
    }
}
/* 
function mapStateToProps (state) {
    return {
        logininfo: state.loginReducer.logininfo,
        activecompany: state.activeCompanyReducer.activecompany
    }
}

export default connect(
    mapStateToProps,
)(WorkShift) */